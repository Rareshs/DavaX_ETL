CREATE TABLE project (
    project_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    contractor VARCHAR2(100),
    description VARCHAR2(255)
);

CREATE TABLE task (
    task_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    description VARCHAR2(255)
);

CREATE TABLE project_task (
    project_id NUMBER NOT NULL,
    task_id NUMBER NOT NULL,
    CONSTRAINT pk_project_task1 PRIMARY KEY (project_id, task_id),
    CONSTRAINT fk_project1 FOREIGN KEY (project_id) REFERENCES project(project_id),
    CONSTRAINT fk_task1 FOREIGN KEY (task_id) REFERENCES task(task_id)
);

--populat manual cu import si mapat campurile din csv pe tabelele Clean_Data/Timesheet/timesheet_week24.csv si timesheet_week25.csv
CREATE TABLE timesheet (
    id_timesheet     NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    employee_id      NUMBER NOT NULL,
    project_id       NUMBER NOT NULL,
    task_id          NUMBER NOT NULL,
    location         VARCHAR2(10),
    work_type        VARCHAR2(100),
    created_at       DATE DEFAULT SYSDATE NOT NULL,
    start_date       DATE NOT NULL,
    end_date         DATE NOT NULL,
    week_number NUMBER GENERATED ALWAYS AS (TO_NUMBER(TO_CHAR(start_date, 'IW'))) VIRTUAL,
    CONSTRAINT fk_employee FOREIGN KEY (employee_id) REFERENCES DAVAX_EMPLOYEES(employee_id),
    CONSTRAINT fk_project FOREIGN KEY (project_id) REFERENCES project(project_id),
    CONSTRAINT fk_task FOREIGN KEY (task_id) REFERENCES task(task_id)
);

--datele de aici sunt incarcate prin script-ul de python load_attendance_to_oracle.py sau etl_master.py
CREATE TABLE STG_ATTANDANCE (
    name                VARCHAR2(100 BYTE),
    first_join          TIMESTAMP(6),
    last_leave          TIMESTAMP(6),
    in_meeting_duration VARCHAR2(20 BYTE),
    email               VARCHAR2(100 BYTE),
    participant_id      VARCHAR2(100 BYTE),
    role                VARCHAR2(50 BYTE),
    calculated_duration VARCHAR2(20 BYTE),
    duration_minutes    NUMBER,
    source_file         VARCHAR2(50 BYTE),
    etl_loaded_at       DATE DEFAULT SYSDATE
);

--datele de aici sunt incarcate prin script-ul de python load_absence_to_oracle.py sau etl_master.py
CREATE TABLE confluence_absence (
    name VARCHAR2(100),
    reason VARCHAR2(30),
    sdate DATE,
    shour VARCHAR2(10),
    edate DATE,
    ehour VARCHAR2(10),
    city VARCHAR2(50)
);

--populat manual cu import si mapat campurile din csv pe tabel Clean_Data/Employees/Dev_Mentor.csv
CREATE TABLE dev_mentors (
    dev_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name   VARCHAR2(100) NOT NULL
);

-- 2. Data Mentors
--populat manual cu import si mapat campurile din csv pe tabel Clean_Data/Employees/Data_Mentor.csv
CREATE TABLE data_mentors (
    data_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name    VARCHAR2(100) NOT NULL
);

-- 3. Coordinators
--populat manual cu import si mapat campurile din csv pe tabel Clean_Data/Employees/Coordonator.csv
CREATE TABLE coordinators (
    coord_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name     VARCHAR2(100) NOT NULL
);

--populat manual cu import si mapat campurile din csv pe tabel Clean_Data/Employees/Normalized_Davax_Employees.csv
CREATE TABLE davax_employees (
    employee_id       NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    name              VARCHAR2(100) NOT NULL,
    location          VARCHAR2(50),
    dev_id            NUMBER,
    data_id           NUMBER,
    coord_id          NUMBER,
    CONSTRAINT fk_dev     FOREIGN KEY (dev_id)   REFERENCES dev_mentors(dev_id),
    CONSTRAINT fk_data    FOREIGN KEY (data_id)  REFERENCES data_mentors(data_id),
    CONSTRAINT fk_coord   FOREIGN KEY (coord_id) REFERENCES coordinators(coord_id)
);

-- 2. Update pentru DATA_TRAINER_ID
CREATE TABLE historical_davax_employees (
    hist_id           NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    employee_id       NUMBER,
    name              VARCHAR2(100),
    location          VARCHAR2(50),
    dev_id            NUMBER,
    data_id           NUMBER,
    coord_id          NUMBER,
    start_date        DATE DEFAULT SYSDATE,
    end_date          DATE,
    current_flag      CHAR(1) CHECK (current_flag IN ('Y', 'N')),
    CONSTRAINT fk_hist_dev   FOREIGN KEY (dev_id)   REFERENCES dev_mentors(dev_id),
    CONSTRAINT fk_hist_data  FOREIGN KEY (data_id)  REFERENCES data_mentors(data_id),
    CONSTRAINT fk_hist_coord FOREIGN KEY (coord_id) REFERENCES coordinators(coord_id)
);
